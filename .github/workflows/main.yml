# This is a basic workflow to help you get started with Actions

name: Tafuta-Nyumba

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the development branch
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        redis-version: [4, 5, 6]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setting up python
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9.1"

      # Install app dependecies
      - name: Install pipenv
        run: |
           python -m pip install --upgrade pipenv wheel
           pipenv install mixer pytest flask flask_migrate sqlalchemy flask_redis africastalking
      
      - name: Start Redis
        uses: supercharge/redis-github-action@1.2.0
        with: 
          redis-version: ${{ matrix.redis-version }}
       
      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      
      - name: Install dependecies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev
          
      - name: GitHub Action for pytest
        run: pipenv run pytest 
        
      # - name: Super-Linter
      #   uses: github/super-linter@v3.17.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Deploy Docker Image to Heroku App
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          procfile: "web: gunicorn application.web.app:app"
          dontautocreate: true
          usedocker: true
          appdir: "/application/web"

         
